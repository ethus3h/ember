<h1 class="title">Computing Environment — Ember</h1>

<p class="breadcrumbs">Page location: 
    <span><a href="/ember/">Ember</a></span>
</p>
<h2>Ember Scripting Language (ESL)</h2>
    <p>Goal: Combine best features of bash, php, assembly, C, java, python, go</p>

    <p>#TODO: Rewrite these examples.</p>

    <p>Hello World:</p>

    <code>echo('Hello, World!');</code>

    <p>Simple web spider (unfinished since the power's gone out, and I can't really see what I'm doing (I'm using a flashlight to write this note, but it's awkward)):</p>

    <code>exception:noURLsProvidedException {
        this.description = 'Warning: No URLs were provided; returning an empty list.';
        this.behavior = {
            return(list);
            break;
        }
    }

    function:Crawl[str:urls] throws noURLsProvidedException {
        # Starting from a seed URL, returns a list of URLs linked.
        array(list(str, bool):$AutoID):urls = explode($urls,' ','\');
        if($urls.count == 0) {
            throw noUrlsProvidedException;
        }
        foreach ($urls as $url) {
            if($url.get(1) == true) {
                # $url[0] is shorthand for $url.get(0).
                str:$result = network.get($url[0], --allow-insecure=1);
                list:$newURLs = str.extractURLs($result,str.guessDataType);
                $urls.mergeFrom($newURLs);
            }
        }
    }</code>
    <h3>ESL syntax</h3>
    <ul>
        <li>"L" — low-level functionality, available only in Basic and Dangerous profiles. "B" - available in Basic, Standard, and Dangerous profiles.</li>
        <li>"D" - available only in Dangerous profile. Otherwise, available only in Standard and Dangerous profiles.</li>
    </ul>

    <p>An argument with the wrong type getting passed to a function is a compile-time error.</p>

    <h4>Types</h4>

    <ul>
        <li>B: Boolean: one of (True, False)</li>
    </ul>

    <h5>Numbers [missing scientific notation]<h5>
    <ul>
        <li>B: BFractionalNumber: An Integer numerator and an Integer denominator.</li>
        <li>B: ComplexNumber: A RealNumber real part, and a RealNumber imaginary part.</li>
        <li>CompoundNumber: A sequence describing a number. Can include roman numerals, operations, significant figures, etc..</li>
        <li>B: DecimalNumber: An Integer whole number part, a WholeNumber partial number part, and a WholeNumber number of repeating digits.</li>
        <li>B: Integer: a Boolean sign (True: negative; False: positive) and a WholeNumber value. A sign of True and a value of 0 is a compile-time or run-time error.</li>
        <li>B: Number: one of (RealNumber, ComplexNumber, [only in Standard and Dangerous profiles, CompoundNumber]).</li>
        <li>B: NumericalConstant: one of (pi, e, maybe others?)</li>
        <li>B: RealNumber: one of (BFractionalNumber, ComplexNumber, DecimalNumber, NumericalConstant, WholeNumber)</li>
        <li>B: WholeNumber: A nonnegative integer.</li>
        <li>Value: a Number and a Unit.</li>
        <li>Unit</li>
    </ul>

    <ul>
        <li>B: String: a list of bytes.</li>
    </ul>

    <h5>Complex structures</h5>
    <ul>
        <li>B: List(Type:$type): a Table(Integer:$id, Object&lt;$type&gt;:$value).</li>
        <li>B: Table(types)</li>
    </ul>

    <ul>
        <li>B: Object: All variables and methods are Objects. Methods return Objects.</li>
        <li>B: Class: A set of parameters and methods defining what an Object can be like.</li>
        <li>B: Method: Defined using the syntax: MethodName(Parameter1, Parameter2){ code; }, or an anonymous method defined using { }.</li>
        <li>B: Parameter: A named value. String name, Type type, Object&lt;$type&gt; value.</li>
        <li>B: Type: Either a type name (e.g. String), or a type name and qualifying types (e.g. Table&lt;Integer, List&lt;Integer, Object&gt;, List&gt;).&lt;/Integer,&gt;</li>
    </li>

    <h4>Language builtins</h4>

    <h5>Language operation parameters, in format parameter:[possible values]</h5>

    <ul>
        <li>context:[document | terminal | webscript] - affects whether to render output to a document display space, to send it to a terminal, or to render it as HTML/CSS/JS and send it to a Web server. Default depends on the file format: EDF defaults to document, ESL defaults to terminal, and EWS defaults to webscript.</li></li>
        <li>profile:[basic | standard | dangerous] - Tells the interpreter/compiler what set of language features to allow.</li>
    </ul>


    <h5>Functions</h5>

    <ul>
        <li>B: set(String:$param, String:$value) - set language parameter $param to $value. An unknown value for $param is a compile-time error. An unknown value for a given $param / $value pair is also a compile-time error. Alias for e.sys.interpreter.set().</li>
        <li>B: say(String:$str) - send $str to the current output. Alias for e.io.say().</li>
        <li>B: add(Number:$n1, Number:$n2) - return the sum of $n1 and $n2.</li>
        <li>B: add(String:$s1, String:$s2) - return $s1 concatenated to $s2</li>
        <li>B: subtract()</li>
        <li>B: multiply()</li>
        <li>B: divide() - Division by zero is a compile-time or run-time error. Returns a DecimalNumber.</li>
        <li>B: mod()</li>
        <li>B: exp()</li>
        <li>compress(String:$string, [String:$compressionMethod])</li>
        <li>encrypt(String:$string, String:$passphrase)</li>
    </ul>

<h2>Keyboard layout

    <h3>arrow pad</h3>
    <p>CAC = click / action / center "arrow"</p>
    <table>
        <tr><td>prev. tab</td><td>?</td><td>next tab</td></tr>
        <tr><td>back page</td><td>up</td><td>forward page</td></tr>
        <tr><td>left</td><td>[down|CAC]</td><td>right</td></tr>
        <tr>CAC</td><td>[down|?]</td><td>?</td></tr>
    </table>

<h2>EDF standard editor</h2>
<p>use glyph editing thing from GlyphWiki?; provide graphical way to choose Dcs when selecting them in syntaxes and in the mapping editor, etc.; for editing the mapping table, when a user clicks on it they should be taken to a list of all the unique values of the mapping-from name (e.g. Unicode, Mojikyo, etc.), and when they click one of those, if it has sub-mappings (e.g. Unicode-&gt;Greek and Coptic), it should provide a list of those, and THEN it should show a table of what they selected.</p>

<h2>Development principles</h2>
<p>(Always use the Ember TDD principles.)</p>
<ol>
    <li>Fix unexpected/incorrect result bugs</li>
    <li>Fix crashes and other bugs that critically affect usability</li>
    <li>Optimize slow code where that optimization will dramatically improve usability, at hot points or other points</li>
    <li>Fix minor UX/UI/usability bugs</li>
    <li>Optimize slow code that will improve usability</li>
    <li>Fix regressions or lost features</li>
    <li>Return to step 1</li>
    <li>Add new features</li>
    <li>Return to step 1</li>
    <li class="unordered-list-item-in-ol">* Done *</li>
</ol>
