<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <link href="/m.css" rel="stylesheet" type="text/css"> <meta content="Ember" name="author"> <meta content="width=device-width,height=device-height,user-scalable=yes" name="viewport"> <title>Ember</title> </head> <body> <input class="nav-trigger" id="nav-trigger" type="checkbox"> <label for="nav-trigger">&nbsp;</label> <nav> <p class="logo"> <a class="nodecorate logolink" href="/">ember</a> </p> <ul> <li>Navigation:</li> <li class="nav-item nav-item-inactive"> <a href="/">Home</a> </li> <li class="nav-item nav-item-inactive"> <a href="/news">News</a> </li> <li class="nav-item nav-item-inactive"> <a href="/ancillary/ready-to-use.htm">Ready-to-use software</a> </li> <li class="nav-item nav-item-inactive"> <a href="/components.htm">Core project</a> </li> <li class="nav-item nav-item-inactive"> <a href="/people">People</a> </li> </ul> <a href="#">&#x1F51D;&#xFE0E;</a> </nav> <main> <h1 class="title">Computing Environment — Ember</h1> <p class="breadcrumbs">Page location: <span><a href="/components.htm">Core project components</a></span> </p><nav id="toc"><h2>Table of Contents</h2> <ol><li><a href="#Introduction">Introduction</a></li> <li><a href="#Overview">Overview</a></li> <li><a href="#Data_formats">Data formats</a> <ol><li><a href="#Ember_Document_Format_.28EDF.29">Ember Document Format (EDF)</a> <ol><li><a href="#Header">Header</a></li> </ol></li> <li><a href="#Body">Body</a></li> </ol></li> <li><a href="#Ember_Scripting_Language_.28ESL.29">Ember Scripting Language (ESL)</a> <ol><li><a href="#ESL_syntax">ESL syntax</a> <ol><li><a href="#Types">Types</a> <ol><li><a href="#Numbers_.5Bmissing_scientific_notation.5D">Numbers [missing scientific notation]</a></li> <li><a href="#Complex_structures">Complex structures</a></li> </ol></li> <li><a href="#Language_builtins">Language builtins</a> <ol><li><a href="#Language_operation_parameters.2C_in_format_parameter:.5Bpossible_values.5D">Language operation parameters, in format parameter:[possible values]</a></li> <li><a href="#Functions">Functions</a></li> </ol></li> </ol></li> </ol></li> <li><a href="#Keyboard_layout">Keyboard layout</a> <ol><li><a href="#arrow_pad">arrow pad</a></li> </ol></li> <li><a href="#EDF_standard_editor">EDF standard editor</a></li> <li><a href="#Development_principles">Development principles</a> <ol><li><a href="#Ember_Node_File_.28ENF.29_format_specification">Ember Node File (ENF) format specification</a></li> </ol></li> <li><a href="#Centralized_cloud_database">Centralized cloud database</a> <ol><li><a href="#Metadata_types_common_to_all_nodes_.23TODO:_Update">Metadata types common to all nodes #TODO: Update</a></li> </ol></li> <li><a href="#Computing_environment_description">Computing environment description</a></li> <li><a href="#Structured_specifications">Structured specifications</a> <ol><li><a href="#Server_behavior_specification">Server behavior specification</a></li> <li><a href="#OS_client_behavior_specification">OS client behavior specification</a></li> <li><a href="#WWW_client_behavior_specification">WWW client behavior specification</a></li> </ol></li> <li><a href="#Notes_and_Ideas">Notes and Ideas</a></li> </ol> </nav> <h2 id="Introduction">Introduction</h2> <p>This section documents the Ember computing environment specifications. The Ember computing environment is a centralized append-only cloud database, synchronized regularly to the Internet Archive, and a computer operating system and Web interface for using that database.</p> <h2 id="Overview">Overview</h2> <p>It consists of the following components:</p> <p><br></p> <p><br></p> <ul> <li>Data formats: Abstract specifications of the data formats used by the computing environment.</li> <li>Data archive: append-only list of records, each comprising a unique ID paired with an EDF node. See Structural principles section for details.</li> <li>Server infrastructure: A computing cloud that responds to requests from clients. “Server” does not necessarily refer to a hardware server, but rather to an application that responds to requests from another application (client or server).</li> <ul> <li>Public interface servers: Accept API requests from clients and pass them to the correct handlers.</li> <li>Application servers: Handles user authentication, in-the-cloud compute tasks, etc.</li> <li>Search servers: Receives search requests from and returns results to the public interface servers. Indexes documents as they are added to the data repository.</li> <li>Data servers: Receive instructions from and return data to the public interface servers and the application servers. Interact with the data repository. Handles encryption and decryption of documents.</li> </ul> <li>Clients: Applications that interact with end users or follow instructions to leverage the computing environment. <br> </li> </ul> <h2 id="Data_formats">Data formats</h2> <h3 id="Ember_Document_Format_.28EDF.29">Ember Document Format (EDF)</h3> <h4 id="Header">Header</h4> <p>The Ember Document Format (EDF) is a data format used by the Ember computing environment. It is a descendent of DCE, although it is <b>not</b> a version of DCE, and is <b>not</b> compatible with the DCE specifications. EDF as presented in this version of <i>Ember</i> is NOT the same file format as EDF presented in version 43, and is NOT compatible with it. The earlier format can be identified by the magic number at the beginning 0x 89 45 44 46 65 0D 0A 1A 0A FE FF. The magic number of this file format is 0x 89 45 44 46 65 0D 0A 1A FE FF 0A.</p> <p>The latest version of this book (<i>Ember</i>) is the official latest EDF specification</p> <p><br></p> <p>Every EDF file begins with a 4096 byte header portion. That will follow a format that will not change in the future. Header format (partly based on the PNG example and advice at http://www.fadden.com/tech/file-formats.html ) (in ASCII, variable and non-ASCII byte regions marked by brackets []):</p> <p>[0x89]EDFe[0x0D0A1AFEFF0A]|http://futuramerlin.com/|Format version:[972 bytes identifying file format version; these are defined in the specification]|MD5:[32 bytes of MD5 checksum in lowercase ASCII hexadecimal]|SHA1:[40 bytes of SHA-1 checksum in lowercase ASCII hexadecimal]|SHA512:[128 bytes of SHA-512 checksum in lowercase ASCII hexadecimal]|Author Identifier:[567 bytes identifying the way the file was created (i.e. what software was used to produce it); these are defined in the specification]|Creation metadata:[1517 bytes to be used as specified below]|Comments:[501 bytes for use by document creators or other software]|MD5:[32 bytes of MD5 header checksum in lowercase ASCII hexadecimal]|SHA1:[40 bytes of SHA-1 header checksum in lowercase ASCII hexadecimal]|SHA512:[128 bytes of SHA-512 header checksum in lowercase ASCII hexadecimal] [0x00]</p> <p>Other than this header, which is guaranteed to be the same in all future versions of this specification, all other aspects of the file format may vary in future specifications. The non-header checksums are of all of the document except the header. The header checksums are of the beginning of the file to the end of the Author Identifier region.</p> <p>The file format version for this version of the standard is ASCII 1_0_44 padded with 966 ASCII spaces.</p> <p>If the Author Identifier begins with ASCII PUAI: then it is a Private Use Author Identifier and is not specified by this standard. Private Use Author Identifiers and Comments may not contain the vertical bar | or ASCII null (0x00).</p> <p>Creation metadata format specification</p> <p>If the Creation metadata starts with <b>20 ASCII spaces</b>, the following data (until the end of the Creation metadata block) is to be interpreted (using the Gregorian calendar) as:</p> <p>|Creation time:[±6-digit year]-[2-digit month]-[2-digit day] [2-digit 24-hour hour].[2-digit minute].[2-digit second].[6-digit microseconds] [time zone offset in seconds] [32 spaces reserved for future use for time certainty value]|Creation location: [location beginning with “geo:” or “(name) ”, padded to the right with spaces]</p> <p><br></p> <p>If the location begins with geo:, it is to be interpreted as a geo URI (http://tools.ietf.org/html/rfc5870 ).</p> <p><br></p> <p>If the time certainty value begins with an ASCII space, it is a private use value not specified by this standard.</p> <p><br></p> <p>If the Creation time or Creation location are all empty (filled with spaces), they are to be interpreted as unknown.</p> <p><br></p> <p>If the Creation time or Creation location begin with a space, it/they is/are a private use value not specified by this standard.</p> <p><br></p> <p>Example (geo URI example from https://en.wikipedia.org/wiki/Geo_URI ):</p> <p>|Creation time: +002015-03-16 18.23.34.000000 +50400 [32 spaces]|Creation location: geo:37.786971,-122.399677;crs=Moon-2011;u=35[lots of spaces]</p> <h3 id="Body">Body</h3> <p>The remaining information in this section pertains to this version of the specification, and may change in future versions.</p> <p><br></p> <p>At present, any ASCII text can be placed inside an EDF file. No meaning is given to it beyond that inherent to it.</p> <p><br></p> <p>Each EDF file has three components: a header, a record data chunk, and a complex data chunk. The information in the record data chunk is required to be entirely redundant to the information in the complex data chunk, and is included to provide an efficiently machine-readable representation of structured data included in the complex data chunk.</p> <p>Blocks</p> <table cellspacing="0" cellpadding="0"> <tbody> <tr> <td valign="middle"> <p>Name</p> </td> <td valign="middle"> <p>Type</p> </td> <td valign="middle"> <p>ID</p> </td> <td valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p>Latin</p> </td> <td valign="middle"> <p>Script</p> </td> <td valign="middle"> <p>5</p> </td> <td valign="middle"> <p>blah</p> </td> </tr> <tr> <td valign="middle"> <p>Greek</p> </td> <td valign="middle"> <p>Script</p> </td> <td valign="middle"> <p>6</p> </td> <td valign="middle"> <p>blah</p> </td> </tr> </tbody> </table> <p>Characters</p> <table cellspacing="0" cellpadding="0"> <tbody> <tr> <td valign="middle"> <p><b>B</b></p> </td> <td valign="middle"> <p><b>Latin Letter Capital B</b></p> </td> <td valign="middle"> <p><b></b><br></p> </td> <td valign="middle"> <p><b></b><br></p> </td> <td valign="middle"> <p><b></b><br></p> </td> <td colspan="3" valign="middle"> <p><b></b><br></p> </td> </tr> <tr> <td valign="middle"> <p><b></b><br></p> </td> <td valign="middle"> <p>Block</p> </td> <td valign="middle"> <p>5</p> </td> <td valign="middle"> <p>Latin</p> </td> <td valign="middle"> <p>ASCII</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Unicode</p> </td> <td valign="middle"> <p>U+0000</p> </td> <td valign="middle"> <p>Foo</p> </td> <td colspan="2" valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Mojikyo</p> </td> <td valign="middle"> <p>030400</p> </td> <td valign="middle"> <p>Foo</p> </td> <td colspan="2" valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Foo</p> </td> <td colspan="2" valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p>35203</p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Foo</p> </td> <td colspan="2" valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p><b>C</b></p> </td> <td valign="middle"> <p><b>Latin Letter Capital C</b></p> </td> <td valign="middle"> <p><b></b><br></p> </td> <td valign="middle"> <p><b></b><br></p> </td> <td valign="middle"> <p><b></b><br></p> </td> <td colspan="3" valign="middle"> <p><b></b><br></p> </td> </tr> <tr> <td valign="middle"> <p><b></b><br></p> </td> <td valign="middle"> <p>Block</p> </td> <td valign="middle"> <p>5</p> </td> <td valign="middle"> <p>Latin</p> </td> <td valign="middle"> <p>ASCII</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Unicode</p> </td> <td valign="middle"> <p>U+0000</p> </td> <td valign="middle"> <p>Foo</p> </td> <td colspan="2" valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Mojikyo</p> </td> <td valign="middle"> <p>030400</p> </td> <td valign="middle"> <p>Foo</p> </td> <td colspan="2" valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Foo</p> </td> <td colspan="2" valign="middle"> <p>Bar</p> </td> </tr> <tr> <td valign="middle"> <p>35205</p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Foo</p> </td> <td valign="middle"> <p>Bar</p> </td> <td valign="middle"> <p>Foo</p> </td> <td colspan="2" valign="middle"> <p>Bar</p> </td> </tr> </tbody> </table> <h2 id="Ember_Scripting_Language_.28ESL.29">Ember Scripting Language (ESL)</h2> <p>Goal: Combine best features of bash, php, assembly, C, java, python, go</p> <p>#TODO: Rewrite these examples.</p> <p>Hello World:</p> <pre><code>echo('Hello, World!');</code></pre> <p>Simple web spider (unfinished since the power's gone out, and I can't really see what I'm doing (I'm using a flashlight to write this note, but it's awkward)):</p> <pre><code>exception:noURLsProvidedException {
        this.description = 'Warning: No URLs were provided; returning an empty list.';
        this.behavior = {
            return(list);
            break;
        }
    }

    function:Crawl[str:urls] throws noURLsProvidedException {
        # Starting from a seed URL, returns a list of URLs linked.
        array(list(str, bool):$AutoID):urls = explode($urls,' ','\');
        if($urls.count == 0) {
            throw noUrlsProvidedException;
        }
        foreach ($urls as $url) {
            if($url.get(1) == true) {
                # $url[0] is shorthand for $url.get(0).
                str:$result = network.get($url[0], --allow-insecure=1);
                list:$newURLs = str.extractURLs($result,str.guessDataType);
                $urls.mergeFrom($newURLs);
            }
        }
    }</code></pre> <h3 id="ESL_syntax">ESL syntax</h3> <ul> <li>"L" — low-level functionality, available only in Basic and Dangerous profiles.</li> <li>"B" - available in Basic, Standard, and Dangerous profiles.</li> <li>"D" - available only in Dangerous profile. Otherwise, available only in Standard and Dangerous profiles.</li> </ul> <p>An argument with the wrong type getting passed to a function is a compile-time error.</p> <h4 id="Types">Types</h4> <ul> <li>B: Boolean: one of (True, False)</li> </ul> <h5 id="Numbers_.5Bmissing_scientific_notation.5D">Numbers [missing scientific notation]</h5> <ul> <li>B: BFractionalNumber: An Integer numerator and an Integer denominator.</li> <li>B: ComplexNumber: A RealNumber real part, and a RealNumber imaginary part.</li> <li>CompoundNumber: A sequence describing a number. Can include roman numerals, operations, significant figures, etc..</li> <li>B: DecimalNumber: An Integer whole number part, a WholeNumber partial number part, and a WholeNumber number of repeating digits.</li> <li>B: Integer: a Boolean sign (True: negative; False: positive) and a WholeNumber value. A sign of True and a value of 0 is a compile-time or run-time error.</li> <li>B: Number: one of (RealNumber, ComplexNumber, [only in Standard and Dangerous profiles, CompoundNumber]).</li> <li>B: NumericalConstant: one of (pi, e, maybe others?)</li> <li>B: RealNumber: one of (BFractionalNumber, ComplexNumber, DecimalNumber, NumericalConstant, WholeNumber)</li> <li>B: WholeNumber: A nonnegative integer.</li> <li>Value: a Number and a Unit.</li> <li>Unit</li> </ul> <ul> <li>B: String: a list of bytes.</li> </ul> <h5 id="Complex_structures">Complex structures</h5> <ul> <li>B: List(Type:$type): a Table(Integer:$id, Object&lt;$type&gt;:$value).</li> <li>B: Table(types)</li> </ul> <ul> <li>B: Object: All variables and methods are Objects. Methods return Objects.</li> <li>B: Class: A set of parameters and methods defining what an Object can be like.</li> <li>B: Method: Defined using the syntax: MethodName(Parameter1, Parameter2){ code; }, or an anonymous method defined using { }.</li> <li>B: Parameter: A named value. String name, Type type, Object&lt;$type&gt; value.</li> <li>B: Type: Either a type name (e.g. String), or a type name and qualifying types (e.g. Table&lt;Integer, List&lt;Integer, Object&gt;, List&gt;).&lt;/Integer,&gt;</li> </ul> <h4 id="Language_builtins">Language builtins</h4> <h5 id="Language_operation_parameters.2C_in_format_parameter:.5Bpossible_values.5D">Language operation parameters, in format parameter:[possible values]</h5> <ul> <li>context:[document | terminal | webscript] - affects whether to render output to a document display space, to send it to a terminal, or to render it as HTML/CSS/JS and send it to a Web server. Default depends on the file format: EDF defaults to document, ESL defaults to terminal, and EWS defaults to webscript.</li> <li>profile:[basic | standard | dangerous] - Tells the interpreter/compiler what set of language features to allow.</li> </ul> <h5 id="Functions">Functions</h5> <ul> <li>B: set(String:$param, String:$value) - set language parameter $param to $value. An unknown value for $param is a compile-time error. An unknown value for a given $param / $value pair is also a compile-time error. Alias for e.sys.interpreter.set().</li> <li>B: say(String:$str) - send $str to the current output. Alias for e.io.say().</li> <li>B: add(Number:$n1, Number:$n2) - return the sum of $n1 and $n2.</li> <li>B: add(String:$s1, String:$s2) - return $s1 concatenated to $s2</li> <li>B: subtract()</li> <li>B: multiply()</li> <li>B: divide() - Division by zero is a compile-time or run-time error. Returns a DecimalNumber.</li> <li>B: mod()</li> <li>B: exp()</li> <li>compress(String:$string, [String:$compressionMethod])</li> <li>encrypt(String:$string, String:$passphrase)</li> </ul> <h2 id="Keyboard_layout">Keyboard layout</h2> <h3 id="arrow_pad">arrow pad</h3> <p>CAC = click / action / center "arrow"</p> <table> <tr><td>prev. tab</td><td>?</td><td>next tab</td></tr> <tr><td>back page</td><td>up</td><td>forward page</td></tr> <tr><td>left</td><td>[down|CAC]</td><td>right</td></tr> <tr><td>CAC</td><td>[down|?]</td><td>?</td></tr> </table> <h2 id="EDF_standard_editor">EDF standard editor</h2> <p>use glyph editing thing from GlyphWiki?; provide graphical way to choose Dcs when selecting them in syntaxes and in the mapping editor, etc.; for editing the mapping table, when a user clicks on it they should be taken to a list of all the unique values of the mapping-from name (e.g. Unicode, Mojikyo, etc.), and when they click one of those, if it has sub-mappings (e.g. Unicode-&gt;Greek and Coptic), it should provide a list of those, and THEN it should show a table of what they selected.</p> <h2 id="Development_principles">Development principles</h2> <p>(Always use the Ember TDD principles.)</p> <ol> <li>Fix unexpected/incorrect result bugs</li> <li>Fix crashes and other bugs that critically affect usability</li> <li>Optimize slow code where that optimization will dramatically improve usability, at hot points or other points</li> <li>Fix minor UX/UI/usability bugs</li> <li>Optimize slow code that will improve usability</li> <li>Fix regressions or lost features</li> <li>Return to step 1</li> <li>Add new features</li> <li>Return to step 1</li> <li class="unordered-list-item-in-ol">* Done *</li> </ol> <h3 id="Ember_Node_File_.28ENF.29_format_specification">Ember Node File (ENF) format specification</h3> <p>File extension enf</p> <p><br></p> <p>An ENF is a EDF document with additional information required.</p> <h2 id="Centralized_cloud_database">Centralized cloud database</h2> <p>The Ember community will maintain a centralized database designed to use relationships to organise information.</p> <p>It is an organisational structure based on three classes of information using which all knowledge can be organised. Its structural philosophy uses "nodes" to organize information, which can be entities, metadata records, data, or relationships. A node represents an individual item or concept. A relationship is a description of the connection between two nodes. A metadatum is an objective truth about a node, such as the number of words in a book or the dimensions of a sculpture.</p> <p>The homepage of an implementation of a previous iteration of this project, called <span class="reftitle">Weave</span>, can be found at <a href="http://futuramerlin.com/r.php?c=w&amp;a=1&amp;locale=">http://futuramerlin.com/r.php?c=w&amp;a=1&amp;locale=</a>. Ember's current database structure does not yet have a working implementation.</p> <p>Ember uses the Ember Document Format for the storage of its data.</p> <p>A quotation that seems to explain to some extent what I'm trying to do with this project: "Machines don't have a universal noun - that's why they suck." (http://www.looah.com/source/view/2284). This is one of the problems I hope Ember's computing environment will solve.</p> <h3 id="Metadata_types_common_to_all_nodes_.23TODO:_Update">Metadata types common to all nodes #TODO: Update</h3> <p>Structural principles: old Weave version</p> <p>Note that this section is VERY outdated as of 2014-12-30, and describes the Weave system. The current proposed data structure as of 2014-12-30 is similar, but uses an append-only list instead, in which each entry is a node. (That way, relationships, metadata, etc. are all nodes and so have all of the fun and useful properties of nodes.)</p> <p>Nodes</p> <p>A <b>node</b> is an individual record of an item. It is the central element to data organisation in Weave. A node can have both metadata and relationships to provide information regarding it.</p> <p>It can have a data file attached to it.</p> <p>A node can have the following fields:</p> <p>Title</p> <p>Sort title</p> <p>Display title</p> <p>Short title</p> <p>Type</p> <p>Description</p> <p>Disambiguation description</p> <p>Source (citation)</p> <p>Comments</p> <p>Short description</p> <p>Universe status</p> <p>Copyright status</p> <p>Morality status</p> <p>Morality status as pertinent to minors</p> <p>Personal data status</p> <p>A node's dissemination can be controlled through the use of Permissions.</p> <p>Relationships</p> <p>A <b>relationship</b> is a description of the connection between two nodes.</p> <p>Metadata</p> <p>A metadatum is a record of a concrete attribute of or an objective truth regarding a node, such as the number of words in a book or the dimensions of a sculpture.</p> <h2 id="Computing_environment_description">Computing environment description</h2> <p>One of the fundamental elements of this project would be the creation of a cloud-based information technology system, intended to provide rapid information storage and retrieval (ISR). This would likely use an append-only NoSQL database to store a softly directed concept graph. It would use, in the current implementation I am working on, eight columns: id (integer), node (integer, related to id), date (integer, related to a String node’s id), type (integer, related to type.id), data (integer, related to a String node’s id), deleted (Boolean), author (integer), access_control (integer, related to a String node’s id). Other tables would be needed, including class (id: integer; description: string); …[TODO]. [Also TODO: Looking at it as an object inheritance hierarchy?] [Also TODO: Asynchronous/non-request-driven (background/daemon/triggered/cron tasks)] I think that most or all knowledge can be effectively represented using three basic structures: nodes, relationships, and metadata. I am also developing the Document-Character-Entity encoding system (DCE), which is a state-switching hierarchical many-to-one binary character encoding model. DCE comprises a list of “DCE characters” (Dcs), which are individual semantic units that can be compiled together as a list, as well as individual mapping tables from Dcs to bytes; these mapping tables are linked by state-switch Dcs. Each Dc has rules indicating the syntactic context in which it can be sensibly used, and instructions for parsing it. These rules can be defined using the keywords if, then, else, precedes, succeeds, invalidate, any, state, valid, e.g. if Dc 165 meant “start styled region” it could perhaps be defined as: <code>if(precedes(&lt;any, [end styled region]&gt;)){state(styled);valid;}</code>. A Backus-Naur Form representation of this language would be [TODO].</p> <p>The nodes of a graph are the individual records that it stores. Relationships between those nodes are the edges of the graph, although it is possible that the system I am developing will provide for more complex relationships, for example by allowing relationships to connect several nodes to each other in a variety of ways, although whether that proves necessary or useful remains to be seen. Metadata are an item’s traits: information such as the title of a node, or a description of it. The way I have designed this system, placing all three of these types of entity into one table, allows relationships and metadata to have the attributes of nodes: for example, metadata could be attached to a relationship or another metadatum, or relationships could be specified that connect any combination of the three. There are many existing ISR systems, such as flat files and flat searching, flat-search filterable record sets, sorted records, a variety of tree and tree-like structures, tagged or labeled records, traditional tabular databases, relational databases, sparse tables, sparse matrices and entity-attribute-value models, graphs and digraphs, Boolean-queryable datasets, hierarchies, automated natural-language document acquisition and indexing, metadata-enriched natural-language document acquisition and indexing, and selective-display intelligent query results. The system I am proposing would primarily leverage a graph structure augmented through the use of richly labeled nodes, providing great flexibility in the structures it can manage; in addition, I believe that most or all of the above structures could be emulated within a graph-driven environment.</p> <p>One large challenge faced by the system I propose is the role of server-side processing (SSP). SSP is a vital element of much of modern butt application software, but it does not fit nicely into the information-driven model I propose. I think the best solution for this is through the application of dynamic parsing of DCE content as it is returned by the server. While this strategy could present a serious security risk, if the dynamic content is handed off to servers dedicated to this purpose and sandboxing is employed, I think this risk could be effectively mitigated, at least to the extent of avoiding access privilege escalation attacks against the main database. This will also provide effective options for building the wide variety of ISR systems I outlined above as both self-hosted applications and in user space.</p> <p>There are a variety of content sources that would populate this ISR system: publicly available datasets, creative works, and other resources; resources added and/or created by individuals using the system; “dark” content such as is currently held by social networks, governments, and other organizations that do not publicly release their records; moderated content that has been reviewed and fact-checked and annotated as such by the NGO; dynamically generated content; and computed content, for example, the results from a mathematical calculation or an operation on a dataset.</p> <p>I propose that this ISR system be leveraged by the NGO for several purposes. First, it can be used to record the individuals who are participants in the NGO. Through the development and application of a multipronged biometrics system, perhaps similar to that of India’s Aadhaar program (Wikipedia 2014(d)), the use of names could be easily foregone, allowing for people who are mononymous, change their name frequently, have unconventional names (such as names without graphic representation, names that mutate over time, musical names, graphic names, etc., or even names that simply are not very common (For example, 马𩧢 (Mǎ Chěng) in China who is inconvenienced because her name is not supported by China’s computer systems. (LaFraniere 2009; Wikipedia 2014(e)))), have no name, and so on and so forth to easily use the system, without being subjected to the usual tribulations that accompany any of the above in many modern governments. (It would also eliminate similar gender identity and other issues in receiving government services.) While instability of identification traits in individuals, either through subversion of the system or through chance, is indeed a concern, both for positive and negative identification (Sahoo, Choubisa, and Prasanna 2012), hopefully a sufficiently deep set of metrics could be established to prevent this from being an issue. When an individual becomes part of the NGO, they would be enrolled in the biometric identification system, and marked with a system for tracking of some type. This could take several forms: the most practical and useful, probably, would be a wristwatch-like interface to cloud computing systems that would contain a GPS system and other useful electronics. The purpose of this would be the providing of emergency services: in the event of an emergency, the wearer could interact in it in a way to convey the existence and, if possible, the nature and situation of an emergency. This information would be entered automatically into the ISR system, which would provide a report of the emergency, including the person’s location, their direction and speed of travel, any pre-existing health conditions, their current health state (heart rate, blood pressure, and such). The system could automatically delegate the emergency to a nearby station of the NGO, which would act (presumably with the assistance of emergency response services) to resolve the situation. (I recall having encountered similar systems designed for elderly or disabled individuals; these served in large part as the inspiration for this scenario and solution.)</p> <p>This system also would provide an excellent opportunity for surveillance. By unifying all document processing and communications within the organization into the ISR system I propose, the process of collecting this data and monitoring it for threats would be vastly simplified. There are certainly compelling arguments against surveillance, but if one does not have faith and trust in the organizations created to protect them, those organizations have clearly failed at their purpose and begun to act not in the interest of those whose interests they are designed to protect, but most likely rather in the interest of their own perpetuation for the benefit of those who hold the power to control them. Thomas Jefferson famously wrote in the Declaration of Independence</p> <blockquote>“that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness. —That to secure these rights, Governments are instituted among Men, deriving their just powers from the consent of the governed, —That whenever any Form of Government becomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to institute new Government, laying its foundation on such principles and organizing its powers in such form, as to them shall seem most likely to effect their Safety and Happiness” (Jefferson 1776);</blockquote> <p>in this rather radical passage he lays out in shockingly blunt language the Lockean principle that government is more of a means to an end than an end in and of itself. It is from this basic premise that I draw my conclusion that surveillance in the interest of safety of the people by the institutions they create for their protection is an excellent strategy; I also feel that similar scrutiny must be brought to bear upon the institutions themselves by the people who have created them, thus ensuring that those institutions act effectively in their interests. In addition, these institutions should never attempt to withhold armaments from the people they protect: individuals should be provided the means to create the weapons held by their government. At present this would be impractical (it would, for example, be foolhardy to attempt to overthrow a nuclear power at present, and yet giving nuclear weapons to every person would likely end up in global annihilation), but a long-term global general de-escalation of arms is of significant importance, so that people can, relatively realistically, be in control of the institutions they have created in power as well as in name. In the meantime, there is not much that can be done to this end beyond keeping your rifle maintained and your eye good in the hopes that the day may come that they might represent some element of political power you could have in aggregate with the others around you. Any revolution, of course, would likely only be engendered by horrible social mismanagement or oppression triggering a societal consensus to revolt (this has indeed been the case in some areas recently, such as in the Egyptian revolution in 2011 (Al Jazeera 2011)); this is quite fortunate as if it were not so, unpleasant chaos would no doubt ensue.</p> <p>Education and qualifications could be tracked through this system, as could taxes. For example, when a person completed testing by the organization in a given subject, that score could be recorded in their profile in such a way that it could be used to determine what jobs they are allowed to work at. Taxation should be managed through time, so that a person would put in a certain number of hours of work selected from the jobs that need doing according to the ISR’s task record tracking system (possibly the number of hours necessary for a given amount of the organization’s services provided would be related to the level of qualification necessary for the work in question) to receive the organization’s services in exchange. The person could choose which services to allocate their time credits to — for example, requesting food credits, requesting tickets to operas, or donating them to a militia. In such a way, the taxes levied would hopefully never have to be put to a use the individual did not believe in. Trading could also perhaps be managed through the ISR system.</p> <h2 id="Structured_specifications">Structured specifications</h2> <h3 id="Server_behavior_specification">Server behavior specification</h3> <h3 id="OS_client_behavior_specification">OS client behavior specification</h3> <h3 id="WWW_client_behavior_specification">WWW client behavior specification</h3> <h2 id="Notes_and_Ideas">Notes and Ideas</h2> <p>Ideas and Notes</p> <p>Authority Contexts</p> <p>These do not indicate that information is guaranteed correct within the given authority context, but only that that is the intended authority of the material.</p> <ul> <li>Objective consensus: Like Wikipedia. Neutral point of view. Doesn't necessarily represent all points of view equally because of lack of consensus about them.</li> <li>Objective egalitarian: Neutral point of view, and tries to accept all viewpoints as equally legitimate.</li> <li>Subjective consensus: No neutral point of view, but established by general consensus.</li> <li>Objective single/subset source: Neutral point of view, as established by a single source or a subset of available sources.</li> <li>Objective individual/organization source: Neutral point of view, as believed by an individual or organization.</li> <li>Subjective single/subset source: Opinion (no neutral point of view), as established by a single source or a subset of available sources.</li> <li>Subjective individual/organization source: Opinion (no neutral point of view), as believed by an individual or organization.</li> </ul> <p>And the in-universe counterparts of the above:</p> <ul> <li>In-universe consensus</li> <li>In-universe egalitarian</li> <li>In-universe subjective consensus</li> <li>In-universe objective single/subset source</li> <li>In-universe objective individual/organization source</li> <li>In-universe subjective single/subset source</li> <li>In-universe subjective individual/organization source</li> </ul> <p>Modular Dc Sequence Builders</p> <p>Idea: Modular Dc Sequence Builders</p> <p>For instance: A set builder: Collects nodes. Could be used for file uploads, etc.</p> <p>So, if I want to "upload" a file (send it to an Ember app), I am given a set builder dialog. It lets me pick a document or data record to send. Then, the set containing that document (at its present revision) is saved as a node; that node ID is then passed to the app. The node would have a trait indicating that it was static (that the contents it references would not be able to be changed — just revisions of them at the present state). Alternatively, a dynamic set could be created, in which the document would be able to be updated. Sets could have restrictions e.g. about how many documents they could contain, whether they could contain complex structures (such as a directory tree), whether one document could be swapped out with another or not, (or whether they are dynamic or static). Sets could also be driven by search criteria (e.g. the most relevant 10 nodes for a given keyword, or all nodes matching "DOOM" XOR "MOOD", or all four nodes with type Musician and a "is member of" relationship to "The Beatles", or the rapidly changing set of nodes with type Musician and a current or past "is member of" relationship to "Yes"), or built programmatically from new or existing nodes. This would allow file uploads, searches, etc. to all be driven using the SAME basic user interface module. Basically, a file picker on steroids. The set node would have a Dc sequence representation, as do all nodes, so this is really a Dc sequence builder. A set builder could also be used, for example, to choose what nodes to perform an operation on. So, if I'm writing an app to find all the "has foo of" relationships, delete them, and create corresponding "has bar of" relationships, I could create a dynamic set representing all the "has foo of" relationships, the app would know the node ID of that set, and it would then operate on the present state of that set whenever it is run. Of course, like anything else in Ember a set could "time travel" — a new set could display its results as if it had existed at a previous time, or the previous contents of the set could be displayed even if it did exist then. Another application of the set builder could be creating an Ember theme to share with the community that displayed the current top 10 tracks on the Billboard Hot 100 — a set could be created representing the top 10, and a rule could be created if desired to deal with the condition if the Hot 100 was discontinued: the set could be configured to return nothing, to return a fixed list, to return the top 10 from the final edition of the charts, etc..</p> <p>Likewise, a Color sequence builder should exist, and a Time sequence builder, and a Number sequence builder (could handle variables and complex expressions!), and a Mathematical Equation sequence builder (which would create a Number sequence builder for numbers).</p> <p>General ideas</p> <ul> <li>Tagged nodes, including a system for storing the tags as part of a tag grouping (which could have permissions like a document). Would also have a global tag system, so people could add tags to the global tag grouping.</li> <li>Liberal relationship formation and node typing: A node can be assigned any other node as its type; a relationship can be from any type of node to any other type of node even if that is not how the relationship is defined (this situation could display a warning, for example)</li> <li>Hopefully these traits would help keep restrictions from being a pain in the ass</li> </ul> <p>Data flows</p> <p>Listed: tolerance per item — (maximum ping in ms | minimum bandwidth per second)</p> <p>Fully featured client</p> <p>Input</p> <ul> <li>keyboard(s) and button(s) — (0 | 200b)</li> <li>microphone(s) — (5 | 6144kb assuming 32 bits per sample 192kHz) (calculated using http://www.theaudioarchive.com/TAA_Resources_File_Size.htm )</li> <li>GPS(es) — (1000 | 1kb?)</li> <li>accelerometer(s) — (1000 | 512b?)</li> <li>ambient light sensor(s) — (1000 | 512b?)</li> <li>camera(s) — (100 | 48gb) (assuming 8K 60fps 48-bit RGBA) (calculated using http://web.forret.com/tools/video_fps.asp?width=7680&amp;height=4320&amp;fps=60&amp;space=rgba&amp;depth=48 )</li> <li>pointing tool(s):</li> <ul> <li>Simpler:</li> <ul> <li>mouse — (0 | 800kb?) ( see https://answers.yahoo.com/question/index?qid=20060707143627AAsH1ay )</li> <li>pointing stick</li> <li>trackball</li> <li>trackpad</li> </ul> <li>Complexer:</li> <ul> <li>tablet</li> <li>touchscreen</li> <li>multitouch trackpad (0 | 200kb?) (see http://www.digikey.com/product-search/en/integrated-circuits-ics/data-acquisition-touch-screen-controllers/2557134 )</li> <li>3-dimensional pointing tools</li> </ul> </ul> </ul> <p><br></p> <p>Output to user</p> <ul> <li>Display(s) (2-dimensional)</li> <li>speaker(s)</li> <li>Display(s) (3-dimensional)</li> <li>status (etc.) light(s)</li> <li>projector(s)</li> </ul> <p><br></p> <p>Server</p> <p>Input from clients</p> <ul> <li>Requests: </li> <ul> <li>insert record</li> <li>get record</li> <li>get matching record list (e.g. search results)</li> <li>establish authentication</li> </ul> </ul> <p><br></p> <p>Output to clients</p> <ul> <li>Responses:</li> <ul> <li>Confirmation messages (ACKs)</li> <li>records</li> <li>record lists</li> <li>authentication confirmation</li> </ul> </ul> <p>Note: DCE named syntaxes</p> <p>DCE named syntaxes? (as extension of named sequences) E.g. U+1F4B0 MONEY BAG could map to a Dc "Money bag". The Money bag Dc would be defined as: &lt;Enclosing Bag&gt;(&lt;Class:Currency symbols&gt;)</p> <p>This would allow a) the mapping to represent the money (currency symbol) semantic of the Unicode character and b) a user to create a visually identical sequence with something else in it (e.g.</p> <p>&lt;Enclosing Bag&gt;&lt;Begin Discrete Block&gt;&lt;Begin Style Override&gt;&lt;Begin Style Definition&gt;&lt;Sans Serif&gt;&lt;End Style Definition&gt;XXX&lt;End Style Override&gt;&lt;End Discrete Block&gt;</p> <p>to create a flour bag if the user wanted the same style as the Money bag)</p> <p>Node examples — use cases:</p> <p>Node — a new document someone created… — type: Digital data Has title (file name); has relationships: ☆→created by (ember account), ☆has revisions (each time saved or autosaved). Node: — a piece of music someone had in their computer upon backing up w/ Ember… — type: Digital data. Has title (file name); Relationships: has revision: only the current revision, since it’s never been resaved; has creator (ember account).; has date created (date created from filesystem — with source annotation) Note that the content &amp; format metadata are stored with the Revision nodes, not with the main nodes. Each revision node has autodetected music metadata (e.g. by Musicbrainz PUID lookup) or other autodetected metadata, such as plagiarism detection information. Music metadata &amp; such can be added manually to main &amp;/or revision nodes. DCE (and Wreathe and Ember) should use Google Wave’s letter-by-letter edit tracking technology… then DCE data backed up wouldn’t need independent revision nodes like that — but instead just independent revision nodes for actual conceptual revisions of the document. Maybe, to prevent confusion, autosaved revisions could be called by a different name (i.e. a word other than “revision”.)?…. Wreathe and Ember should hide their DCE underpinnings, for the most part, but at the same time, lower-level DCE editing should be easy.</p> <p>Implementation</p> <p>A full DCE editor à la Wreathe isn’t necessarily necessary for Ember’s web-based administration — just use the all-in-one DCE editor / Ember browser / etc. in Wreathe if one wants desktop-power-level DCE editing in Wreathe [possibly meant to write Ember there?]. Plus, DCE editing can be easily implemented in a web environment without worrying about rendering or display so much — just work with the raw Dcs if that kind of “advanced” functionality is desired, if necessary…?</p> <p>Database schema ideas</p> <p>Ember data modeling</p> <p>Might be useful: http://www.slideshare.net/DanLynn1/storing-and-manipulating-graphs-in-hbase</p> <p>Example schema</p> <p>Note that this is simplified (doesn't deal with character encodings, localisation, strings, etc….</p> <p>Rough example of how things might work (note that type 2 is a relationship and does not necessarily take data but has a node as its target, while type 3 is a metadatum and has to take data but only has its root node:</p> <p><br></p> <p>Top of Form</p> <p><br></p> <p>Classes</p> <table cellspacing="0" cellpadding="0"> <tbody> <tr> <td valign="middle"> <p>id</p> </td> <td valign="middle"> <p><b>description </b></p> </td> </tr> <tr> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>node</p> </td> </tr> <tr> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>relationship</p> </td> </tr> <tr> <td valign="middle"> <p>2</p> </td> <td valign="middle"> <p>metadatum</p> </td> </tr> </tbody> </table> <p>Top of Form</p> <p><br></p> <p>Types</p> <table cellspacing="0" cellpadding="0"> <tbody> <tr> <td valign="middle"> <p>id</p> </td> <td valign="middle"> <p><b>class </b></p> </td> <td valign="middle"> <p><b>description_1 </b></p> </td> <td valign="middle"> <p><b>description_2 </b></p> </td> </tr> <tr> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>person</p> </td> <td valign="middle"> <p><br></p> </td> </tr> <tr> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>basic node</p> </td> <td valign="middle"> <p><br></p> </td> </tr> <tr> <td valign="middle"> <p>2</p> </td> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>has author</p> </td> <td valign="middle"> <p>is author of</p> </td> </tr> <tr> <td valign="middle"> <p>3</p> </td> <td valign="middle"> <p>2</p> </td> <td valign="middle"> <p>has title</p> </td> <td valign="middle"> <p>is title of</p> </td> </tr> </tbody> </table> <p>Top of Form</p> <p><br></p> <p>Users</p> <table cellspacing="0" cellpadding="0"> <tbody> <tr> <td valign="middle"> <p>id</p> </td> <td valign="middle"> <p><b>username </b></p> </td> <td valign="middle"> <p><b>salted_password_hash </b></p> </td> <td valign="middle"> <p><b>node </b></p> </td> <td valign="middle"> <p><b>biometrics data </b></p> </td> </tr> <tr> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>test</p> </td> <td valign="middle"> <p>blahblahblah</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> </tr> </tbody> </table> <p>Top of Form</p> <p><br></p> <p>Nodes</p> <table cellspacing="0" cellpadding="0"> <tbody> <tr> <td valign="middle"> <p>id</p> </td> <td valign="middle"> <p><b>node </b></p> </td> <td valign="middle"> <p><b>date </b></p> </td> <td valign="middle"> <p><b>type </b></p> </td> <td valign="middle"> <p><b>data </b></p> </td> <td valign="middle"> <p><b>node_1 </b></p> </td> <td valign="middle"> <p><b>node_2 </b></p> </td> <td valign="middle"> <p><b>author </b></p> </td> <td valign="middle"> <p><b>permissions </b></p> </td> </tr> <tr> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> </tr> <tr> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> </tr> <tr> <td valign="middle"> <p>2</p> </td> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> </tr> <tr> <td valign="middle"> <p>3</p> </td> <td valign="middle"> <p>2</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p>2</p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> </tr> <tr> <td valign="middle"> <p>4</p> </td> <td valign="middle"> <p>3</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> </tr> <tr> <td valign="middle"> <p>5</p> </td> <td valign="middle"> <p>2</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p>2</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> </tr> <tr> <td valign="middle"> <p>6</p> </td> <td valign="middle"> <p>4</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p>3</p> </td> <td valign="middle"> <p>DCEe…</p> </td> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p><br></p> </td> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>DCEe…</p> </td> </tr> </tbody> </table> <p>Top of Form</p> <p><br></p> <p>Comments and ideas</p> <p>How to deal with complicated situations, e.g. three-node relationships? Could relationships all just be special cases of metadata? (Or maybe vice versa, although I don't think that would work?) What about nondirectional relationships? Or unidirectional?</p> <p>Everything in one big table??</p> <p>How to delete relationships??</p> <p>Relationships and metadata as nodes, all together in one big table??</p> <p>For each node: id</p> <p>For each node revision: id, node_id, revision_date, type, data, node_1, node_2</p> <p>node_id: related to node table</p> <p>type: e.g. "Node has number of pages metadata" or "Data" or "Person" or "node_1 is author of node_2"</p> <p>data: DCE data ID associated with the node (for metadata, this would be the value of the metadata; for a data-type node this would be its contents)</p> <p>node_1 and node_2: two nodes that this node represents a relationship between</p> <p>Structuring EMBER DMS</p> <p><br></p> <p>The Ember data management system: project objectives, implementation plan, and operational structure.</p> <p>Project objectives</p> <p><br></p> <p><br></p> <p><br></p> <p><br></p> <p><br></p> <p>Implementation plan</p> <p><br></p> <p><br></p> <p><br></p> <p><br></p> <p><br></p> <p>Operational structure</p> <p>UI ideas for the Ember project</p> <p>Top of Form</p> <p><br></p> <p>Button</p> <p>Layers:</p> <ul> <li>Background</li> <li>Highlights (like murrine, except not round: `-. `-' .-' .-. = left up right down, respectively)</li> <li>Content</li> <li></li> </ul> <p>Instead of content highlights, have a boolean parameter for stacking order that allows the Highlights layer to go above or below the Content layer.</p> <p><i>n</i>-space-native computer graphics system</p> <p>Idea for a robust n-space-native multithreaded compositing computer graphics system…:</p> <p>There can be many applications.</p> <p>Each application can write to many source spaces, each of which has its own pair of buffers. Each source has two buffers so the data can be read by the compositor at any time, even while the source AND one buffer are being updated. That way, the compositor doesn't ever have to wait. It could just not paint things that weren't ready, but then that could make those things flicker.</p> <p>There is one OS output system.</p> <p>Compositor is a space of the same type as the output (for a 2-dimensional computer screen, for example, the composition space is 2-dimensional).</p> <p>A space is an n-dimensional data structure of graphics (generally vector) objects. Except for the composition space, spaces are organized in relation to other spaces (the origin of the enclosed space corresponds to a given position in the enclosing space). When the enclosed space has more dimensions than the enclosing space, each extra dimension can be chosen to be sliced, projected, or (sliced and?) protruding from the enclosing space. The compositor should also be able to handle other cases correctly, e.g. when the size of one unit in a space is different from another, when a space is rotated relative to another, when the size of one unit changes within a space, unusually shaped spaces, spaces that wrap around at the edges, spaces with holes in them, spaces split into parts, spaces with areas that teleport, spaces that change over time, two or more a-dimensional spaces with b intersecting dimensions (for b less than or equal to a — the other dimensions protruding), etc..</p> <p>Regarding unusually shaped spaces: consider a piece of string as a one-dimensional space. It has a clear linear point system along its length, but it can be bent within 3 dimensions. This case should be handled correctly by the compositor.</p> <p>: How to handle situations where an application needs to reference another application's spaces? Shouldn't be too hard to do, but maybe should have some sort of security/access protection system in place….</p> <p><br></p> <p>The finely dashed lines indicate data going to or coming from multiple instances of the structures shown.</p> <p>To clarify: the compositor should be able to composite any number of simple or complex n-dimensional spaces into a single simple n-dimensional space.</p> <p>Top of Form</p> <p><br></p> <p>Pseudocode for the methods:</p> <p>Top of Form</p> <p><br></p> <p>Bottom of Form</p> <p>Semaphores used, and their meanings/purposes:</p> <ul> <li>When S is up, Compositor can read buffer A</li> <li>When T is up, Compositor can read buffer B</li> <li>When U is up, Source can write to buffer A</li> <li>When V is up, Source can write to buffer B</li> </ul> <p>Top of Form</p> <p><br></p> <p>Bottom of Form</p> <p>Source.push()</p> <p>if(S, V are up):</p> <p> T.down()</p> <p> copy Source to buffer B</p> <p> T.up()</p> <p>else if(T, U are up):</p> <p> S.down()</p> <p> copy Source to buffer A</p> <p> S.up()</p> <p>Top of Form</p> <p><br></p> <p>Bottom of Form</p> <p>Compositor.pull()</p> <p>if(S is up):</p> <p> U.down()</p> <p> copy buffer A into Compositor</p> <p> U.up()</p> <p>else if(T is up):</p> <p> V.down()</p> <p> copy buffer B into Compositor</p> <p> V.up()</p> <p>Coal (data storage system)</p> <p>The Coal Project is an experimental knowledge archival system built using the Internet Archive’s services. The project stores knowledge in a consistent way that enables the information to be understandable by both computers and humans, and accessible to historians, analysts, and other researchers. It is distinct from projects such as Wikidata and MusicBrainz that aim to collect knowledge, in that a primary purpose of the Coal Project is to archive this information. It is also distinct from projects such as the Internet Archive that primarily archive unstructured documents, in that the Coal Project archives knowledge in a way that can be understood by computers. The Coal Project can supplement archived documents by making the knowledge they contain available separately from the documents themselves, as well as by placing documents within the historical context in which they were created by making connections between the documents and other archived records.</p> <p>Coal is the storage system for Ember.</p> <p><br></p> <p>In a nutshell: Long number in, short number out… then later, can put the short number in and get the long number out</p> <p>File formats and extensions</p> <ul> <li>*.cct: Coal chunk temporary data file.</li> <li>*.cot: Coal temporary data file. Can be any binary data.</li> <li>*.coal: Encrypted, compressed Coal chunk.</li> <li>*.coal4: Encrypted, compressed Coal chunk, with embedded metadata.</li> <li>*.cstf: Coal string temporary file (data provided as string for new coal)</li> </ul> <p>Top of Form</p> <p><br></p> <p>Status codes</p> <table cellspacing="0" cellpadding="0"> <tbody> <tr> <td valign="middle"> <p>Code</p> </td> <td valign="middle"> <p><b>Meaning </b></p> </td> </tr> <tr> <td valign="middle"> <p>0</p> </td> <td valign="middle"> <p>Successful</p> </td> </tr> <tr> <td valign="middle"> <p>1</p> </td> <td valign="middle"> <p>Incorrect authorization key</p> </td> </tr> <tr> <td valign="middle"> <p>2</p> </td> <td valign="middle"> <p>Moving uploaded file failed</p> </td> </tr> <tr> <td valign="middle"> <p>3</p> </td> <td valign="middle"> <p>Uploaded file does not exist at $target_path</p> </td> </tr> <tr> <td valign="middle"> <p>4</p> </td> <td valign="middle"> <p>Chunk encryption failed too many times</p> </td> </tr> <tr> <td valign="middle"> <p>5</p> </td> <td valign="middle"> <p>Coal creation failed too many times</p> </td> </tr> <tr> <td valign="middle"> <p>6</p> </td> <td valign="middle"> <p>Uploaded file not referenced in $_FILES</p> </td> </tr> <tr> <td valign="middle"> <p>7</p> </td> <td valign="middle"> <p>Retrieved coal was null</p> </td> </tr> <tr> <td valign="middle"> <p>8</p> </td> <td valign="middle"> <p>Chunk data sent for insertion failed checks</p> </td> </tr> <tr> <td valign="middle"> <p>9</p> </td> <td valign="middle"> <p>Chunk insertion failed too many times</p> </td> </tr> <tr> <td valign="middle"> <p>10</p> </td> <td valign="middle"> <p>S3 bucket exists and not owned by user (see also code 36)</p> </td> </tr> <tr> <td valign="middle"> <p>11</p> </td> <td valign="middle"> <p>Unknown exception while uploading to Internet Archive</p> </td> </tr> <tr> <td valign="middle"> <p>12</p> </td> <td valign="middle"> <p>cURL request failed</p> </td> </tr> <tr> <td valign="middle"> <p>13</p> </td> <td valign="middle"> <p><br></p> </td> </tr> <tr> <td valign="middle"> <p>14</p> </td> <td valign="middle"> <p>Decrypted chunk failed checks too many times</p> </td> </tr> <tr> <td valign="middle"> <p>15</p> </td> <td valign="middle"> <p>Retrieved chunk data failed checks too many times</p> </td> </tr> <tr> <td valign="middle"> <p>16</p> </td> <td valign="middle"> <p>Chunk retrieval failed too many times</p> </td> </tr> <tr> <td valign="middle"> <p>17</p> </td> <td valign="middle"> <p>Block list retrieval failed too many times</p> </td> </tr> <tr> <td valign="middle"> <p>18</p> </td> <td valign="middle"> <p>Returned block data failed checks too many times</p> </td> </tr> <tr> <td valign="middle"> <p>19</p> </td> <td valign="middle"> <p>Compiled record data failed checks too many times</p> </td> </tr> <tr> <td valign="middle"> <p>20</p> </td> <td valign="middle"> <p>retrieveCoal failed</p> </td> </tr> <tr> <td valign="middle"> <p>21</p> </td> <td valign="middle"> <p>resetstatus ran too many times (note: this was a mistake that was supposed to mean what 16 already means)</p> </td> </tr> <tr> <td valign="middle"> <p>22</p> </td> <td valign="middle"> <p>Returned block data failed checks at least once (potential error)</p> </td> </tr> <tr> <td valign="middle"> <p>23</p> </td> <td valign="middle"> <p>Complied record data failed checks at least once (potential error)</p> </td> </tr> <tr> <td valign="middle"> <p>24</p> </td> <td valign="middle"> <p>Block list retrieval failed at least once (potential error)</p> </td> </tr> <tr> <td valign="middle"> <p>25</p> </td> <td valign="middle"> <p>(informational code: not an error) Duplicate found</p> </td> </tr> <tr> <td valign="middle"> <p>26</p> </td> <td valign="middle"> <p>(informational code: not an error) Running procedure for handling duplicate chunk</p> </td> </tr> <tr> <td valign="middle"> <p>27</p> </td> <td valign="middle"> <p>(informational code: not an error) ia_upload returned error 10</p> </td> </tr> <tr> <td valign="middle"> <p>28</p> </td> <td valign="middle"> <p>(informational code: not an error) ia_upload returned other error</p> </td> </tr> <tr> <td valign="middle"> <p>29</p> </td> <td valign="middle"> <p>(informational code: not an error) Retrieved chunk data failed check; retrying</p> </td> </tr> <tr> <td valign="middle"> <p>30</p> </td> <td valign="middle"> <p>(informational code: not an error) Decrypted chunk failed check; retrying</p> </td> </tr> <tr> <td valign="middle"> <p>31</p> </td> <td valign="middle"> <p>(informational code: not an error) Coal creation failed; retrying</p> </td> </tr> <tr> <td valign="middle"> <p>32</p> </td> <td valign="middle"> <p>ID missing from chunk retrieval request</p> </td> </tr> <tr> <td valign="middle"> <p>33</p> </td> <td valign="middle"> <p>(status code: potentially an error) Chunk address too short</p> </td> </tr> <tr> <td valign="middle"> <p>34</p> </td> <td valign="middle"> <p>(from S3 library) S3::putObjectFile(): Failed to copy file</p> </td> </tr> <tr> <td valign="middle"> <p>35</p> </td> <td valign="middle"> <p>(from S3 library) S3::putBucket(): Unable to create bucket (it may already exist and/or be owned by someone else)</p> </td> </tr> <tr> <td valign="middle"> <p>36</p> </td> <td valign="middle"> <p>(previously used code 10) insertChunk returned a non-zero status code</p> </td> </tr> <tr> <td valign="middle"> <p>37</p> </td> <td valign="middle"> <p>(potential error) Coal test retrieval failed; sleeping and retrying</p> </td> </tr> <tr> <td valign="middle"> <p>38</p> </td> <td valign="middle"> <p>(potential error) Chunk metadata parsing failed; retrying</p> </td> </tr> <tr> <td valign="middle"> <p>39</p> </td> <td valign="middle"> <p>Chunk metadata parsing failed too many times</p> </td> </tr> <tr> <td valign="middle"> <p>40</p> </td> <td valign="middle"> <p>(potential error) Coal metadata chunk parsing failed; retrying</p> </td> </tr> <tr> <td valign="middle"> <p>41</p> </td> <td valign="middle"> <p>Coal metadata chunk parsing failed too many times</p> </td> </tr> <tr> <td valign="middle"> <p>42</p> </td> <td valign="middle"> <p>(potential error) Coal metadata chunk metadata parsing failed; retrying</p> </td> </tr> <tr> <td valign="middle"> <p>43</p> </td> <td valign="middle"> <p>Coal metadata chunk metadata parsing failed too many times</p> </td> </tr> <tr> <td valign="middle"> <p>44</p> </td> <td valign="middle"> <p>ia_upload failed too many times</p> </td> </tr> <tr> <td valign="middle"> <p>45</p> </td> <td valign="middle"> <p>Coal test retrieval failed</p> </td> </tr> <tr> <td valign="middle"> <p>46</p> </td> <td valign="middle"> <p>Coal metadata was not correctly unserialized to an array</p> </td> </tr> <tr> <td valign="middle"> <p>46</p> </td> <td valign="middle"> <p>Coal metadata was not correctly unserialized to an array</p> </td> </tr> <tr> <td valign="middle"> <p>46</p> </td> <td valign="middle"> <p>Coal metadata was not correctly unserialized to an array</p> </td> </tr> <tr> <td valign="middle"> <p>46</p> </td> <td valign="middle"> <p>Coal metadata was not correctly unserialized to an array</p> </td> </tr> <tr> <td valign="middle"> <p>50</p> </td> <td valign="middle"> <p>ID for chunk retrieval was invalid (supersedes error 32, erroneously presented as an informational status in the code)</p> </td> </tr> </tbody> </table> <p>Notes on development principles</p> <p><br></p> <p>Rules</p> <p><br></p> <ul> <li>Never remove a feature, capability, or option. If the development of an improved architecture or addition of new features involves scrapping existing code, reintroduce all previously existing capabilities before releasing the changes to the software.</li> <li>Make sure that all tests pass when releasing changes to the software.</li> <li>Resolve issues exclusively in the following order (within each category, resolve in order of decreasing priority):</li> <ul> <li>Poor implementations</li> <li>Poorly tested implementations</li> <li>Bugs:</li> <ul> <li>Because code is an implementation of the expectations defined by the tests, if the tests pass, then any bugs are in the tests, not the code. Therefore, as with all other changes, fix any given bug using the test-driven development (TDD) procedure.</li> </ul> <li>Enhancements</li> </ul> <li>Implement any desired changes using the TDD procedure.</li> </ul> <p><br></p> <p><br></p> <p>The Test-Driven Development Procedure</p> <p><br></p> <ul> <li>Write the simplest possible failing unit test that represents the desired change.</li> <li>Make the minimum changes to code necessary to make that test pass.</li> <li>If necessary, refactor the code and/or test suite.</li> <li>Repeat from step 1.</li> </ul> <p><br></p> <p><br></p> <p>Procedures outline</p> <p>Main:</p> <ul> <li>Greet user</li> <li>Create a ProcessManager</li> <li>Start Bootstrapper thread</li> <li>Wait for Bootstrapper to indicate that all SessionManager threads have finished</li> <li>Exit</li> </ul> <p><br></p> <p>Bootstrapper:</p> <ul> <li>For each interaction context (e.g. terminal, display, etc) found, create a corresponding Context object indicating the traits and capacities (e.g. display resolution, input interfaces such as a mouse or keyboard, capacity for direct access to the hardware, size of a terminal, etc.) of that context, and start a session manager thread (passing the relevant Context object to it so it knows what to do).</li> <li>Wait until each SessionManager is terminated, or until any one SessionManager sends a shutdown signal and no other sessions are active, or until any session sends a global override shutdown (in which case other logged-on users’ accounts’ states should be allowed to finish being saved if saving is still in process, to the cloud if online, and to disk if offline).</li> <li>Indicate to main thread that all session threads have finished.</li> </ul> <p><br></p> <p>SessionManager:</p> <ul> <li>Greet the user.</li> <li>Create a ProcessManager.</li> <li>Start an ApiClient thread to manage any requests to the server.</li> <li>Display a login screen.</li> <li>When a user attempts to log in, check the data with the ApiClient, or with a local cached configuration.</li> <ul> <li>If the credentials are correct:</li> <ul> <li>Start a CommandHandler thread to process instructions from the UserInterface.</li> <li>Start a UserInterface thread, passing the session manager’s Context object to it.</li> <li>Wait until the UserInterface thread indicates that the session has ended.</li> <li>Go to step 4.</li> </ul> <li>If the credentials are incorrect:</li> <ul> <li>Inform the user.</li> <li>Go to step 4.</li> </ul> </ul> </ul> <p><br></p> <p>URI scheme and directory structure for Ember</p> <p><br></p> <p>Base URL:</p> <p>ember://[int:Ember version node ID]/[int:Ember user node ID]&lt;(optional).[int:User domain node ID]&gt;/[DCE:Time at which to view the request]/[int:resource node ID]_Name/[subresources]</p> <p><br></p> <p>Subresources:</p> <p>For example: Listing</p> <p>ember://1/2/[time]/3_ArbitraryNode/M_Title/</p> <p>where [time] was the DCE representation of Now would return a list of node IDs providing Titles for node 3.</p> <p><br></p> <p>Other modes of accessing things can work too:</p> <p>ember://1/2/[time]/4_ScratchPad/ might be user 2’s scratch pad directory.</p> <p>ember://1/2/[time]/5_Environment/6_Keyboard might be a file representing user 2’s keyboard, like something from /dev/ in Linux.</p> <p>Etc.</p> <p><br></p> <p>All Ember URIs must be: ember://([[a-zA-Z0-9%_]]/)+&lt;(optional)/&gt;</p> <p><br></p> <p>% would be used for escaping</p> <p>_ separates a filesystem identifier (either a node ID or a subresource type identifier) from the file name</p> <p>The file name is not really definitive of anything; the node ID is what distinguishes one thing from another. File names are useful for being user-friendly, though.</p> <p><br></p> <p>Subresource types:</p> <ul> <li>M: Metadatum</li> <li>R: Relationship</li> <li>H: History of node</li> <li>D: Data of this node or subresource</li> <li>C: Data of the relationship of the specified node to another node with regard to the enclosing directory</li> <li>(…?)</li> </ul> <p><br></p> <p>Subresources can be chained together:</p> <p>ember://1/2/[time]/3_ArbitraryNode/M_Title/7_ArbitraryNodeTitle/H_History/8_RevisionOfArbitraryNodeTitle/M_CreatedBy/9_UserWhoCreatedRevisionOfArbitraryNodeTitle/M_Parent/C_10</p> <p>would be the DCE representation of the information about the relationship between the user who created revision 8 of node 3’s title, and that user’s parent.</p> <p><br></p> <p>Ember builtin commands (built in to the shell/CLI) should be exposed via the directory structure. As should other resources  Dcs, DCE mapping data, relationship types, node types, metadata types, etc….</p> <p><br></p> <p>Groups and Domains</p> <p>I think there should be a couple features in Ember to make it optimally useful for business use: user groups and domains.</p> <p><br></p> <p>Groups</p> <p>A user group is a list or dynamic set of users that can be used in much the same way as a real user in e.g. ACLs.</p> <p><br></p> <p>Domains</p> <p>A domain is a user group with some extra features, as well as including subdomains. Each user in a domain can choose to use their Ember account as their personal user account, or as any one of their domain roles. Each domain has a <i>domain authority</i> who determines who has what rights in that domain. If the domain authority of the top-level domain so chooses, he/she can have absolute control over all the subdomains within his/her domain (overriding the domain authorities of the individual subdomains). This is only the case if he/she was the creator of the subdomain, unless the actual creator of the subdomain chooses to delegate that control to the parent domain’s authority. Domain authorities can transfer their power to any user, user group, or domain, just as (almost) any document can have its ownership changed. This is because domains are nodes, as are user groups and users. (Note that user nodes can’t have their owner changed, however they can be merged.) Domain/subdomain links do NOT have to be strictly hierarchical.</p> <p><br></p> <p>(Somewhat sexist, sorry, I don’t feel like fixing it right now) domain example:</p> <p><br></p> <p>Boss of company A creates domain for his company, giving his CFO membership in the domain, and creating a Finances subdomain for the finances department in which the CFO is the authority. Boss of company B creates domain for his financial consulting company, and is the authority of it. Company A chooses to purchase company B to manage internal finances at Company A, and so the company B domain is added by the CFO of company A as a subdomain of Company A’s Finances subdomain; the boss of B releases absolute control over his consulting domain to company B.</p> <p><br></p> <p>End result (doesn’t quite correspond exactly to the story above since I decided to add a couple more examples, but is basically it):</p> <ul> <li>Company A domain:</li> <ul> <li>Authority: Company A boss</li> <li>Member: CFO</li> <li>Members: Other employees, with varying levels of access (Authority can set ACLs for members’ access to documents)</li> <li>Subdomain: Finances:</li> <ul> <li>Presiding authority: Company A boss</li> <li>Authority: CFO</li> <li>Members: Finances employees</li> <li>Subdomain: Company B</li> <ul> <li>Presiding authority: Company A boss (Given that Company B boss delegated authority to company A boss  even if not, could still be an uncontrolled subdomain)</li> <li>Authority: Company B boss</li> <li>Members: Company B employees</li> <li>Subdomain: Company A domain, if Company B boss added it as a subdomain (if Company A boss accepted it as a parent domain, it would then show up as a subdomain for him too) (this is pretty much pointless and random, but provides an example of why domains are not strict hierarchies)</li> </ul> </ul> </ul> </ul> <p><br></p> <p>Notes on apps and features</p> <p><br></p> <p>There are a bunch of apps and features that I want to figure out how they will map onto Ember. This is an initial attempt at enumerating (is that the right word for <i>making a list of</i>?) them. (Also: Be able to have a user run one document/app in a given domain, and another in another, and a third as themselves, etc.. No need to make them have separate sessions for working in different domains if they don’t want to  that would make browsing Facebook at work a lot more annoying!.) Maybe more ideas (a lot already added from): http://fileformats.archiveteam.org/wiki/Electronic_File_Formats</p> <p><br></p> <ul> <li>Getting a summary of everything going on (start / home screen kind of thing): Customizable. For example, could contain:</li> <ul> <li>A brief reminder of who/where/when/etc. I am</li> <li>What I have to do today (schedule, tasks, etc.)</li> <li>Important news (e.g. emergencies, etc.)</li> <li>A search box</li> <li>A way to easily create a journal entry, blog/microblog post, social networking status update, etc.</li> <li>A way to easily add an event to my schedule or a task to my to-do list or a note to myself (Stickies style) or a more thorough journal-y note to myself (à la this note on apps and features) (this could even include jotting down / recording / playing in musical ideas, etc.)</li> <li>A way to easily compose an IM / email / etc. or place a voice/videocall</li> <li>Messages from others (emails, IMs, voice/videomails, etc.)</li> <li>Other guided information resources (see below)</li> <li>A hierarchy of things to browse through (web-portal style)</li> <li>…</li> </ul> <li>Media playback</li> <ul> <li>Movies</li> <ul> <li>Feature films</li> <li>Video series</li> <li>Online streaming home video (YouTube, etc.)</li> <li>…</li> </ul> <li>Music</li> <ul> <li>Albums</li> <li>Individual tracks</li> <li>Music videos</li> <li>Artist/album/tag/etc. radio</li> <li>Playlists, including shared playlists</li> <li>Scores</li> <li>…</li> </ul> <li>Games</li> <ul> <li>Interactive fiction, MUDs, MOOs, MMOs, puzzles, board game simulations, many other types of games …</li> </ul> <li>Ebooks</li> <li>Poetry</li> <li>Quotations</li> <li>Essays</li> <li>News</li> <li>Comics</li> <li>Manga</li> <li>Blogs &amp; RSS feeds</li> <li>Consuming realtime media (television, radio, livestreams, …)</li> <li>…</li> </ul> <li>Document creation and sharing</li> <ul> <li>Writing a paper</li> <li>Collaborative document editing / creation</li> <li>Composing a score</li> <li>Writing a book</li> <li>Creating a movie</li> <li>Creating a storyboard for a movie</li> <li>Writing a script</li> <li>Editing a photograph</li> <li>Creating animation</li> <li>Notes to myself (Stickies style)</li> <li>More thorough journal-y notes to myself (à la this note on apps and features) (this could even include jotting down / recording / playing in musical ideas, etc.)</li> <li>3D modeling and rendering</li> <li>CAD</li> <li>Diagramming</li> <li>Creating a database</li> <li>Mind mapping</li> <li>Recording and producing a song</li> <li>Diagramming structures in multiple dimensions</li> <li>Developing apps</li> <li>Designing a typeface</li> <li>Working with GIS data</li> <li>Recording a photograph or a video using a webcam, scanner, camera, …</li> <li>Recording audio using a microphone</li> <li>Working with geometric figures</li> <li>Recording music from a USB/MIDI instrument</li> <li>Blogging and microblogging</li> <li>Working with legal documents</li> <li>…</li> </ul> <li>Browsing through documents and information</li> <ul> <li>Browsing a Web site</li> <li>Browsing through Ember nodes</li> <li>…</li> </ul> <li>Working with structured information (this is mostly also document creation / management)</li> <ul> <li>Managing a genealogy using Ember records</li> <li>Managing a calendar / schedule</li> <li>Managing a to-do list</li> <li>Managing a contacts directory</li> <li>Working with scientific data</li> <li>Maintaining a retail environment (online or physical)</li> <li>Managing recipes</li> <li>Managing a reading list</li> <li>Journaling</li> <li>Managing a bibliography</li> <li>Fantasy sports</li> <li>Managing and using bookmarks</li> <li>Managing financial information</li> <li>Managing personal notes, documents, projects, photographs, videos, etc.</li> <li>Managing a class</li> <li>Participating in a class</li> <li>…</li> </ul> <li>Resources/tools</li> <ul> <li>Dictionary</li> <li>Thesaurus</li> <li>Chemical elements chart and data</li> <li>Maps, travel directions, and sky charts</li> <li>Calculator</li> <li>Using the computer as a flashlight</li> <li>Field guides / identification keys</li> <li>Instructions and how-to information</li> <li>Lessons on things</li> <ul> <li>Typing lessons</li> <li>Instrument lessons</li> <li>Tutorials on using software</li> <li>…</li> </ul> <li>Support using Ember</li> <li>Nutrition information</li> <li>Support in other aspects of life (e.g. help with trouble fishing, etc.)</li> <li>…</li> </ul> <li>Management</li> <ul> <li>Database creation and administration (this is really “Document creation”, but also listed here)</li> <li>Network administration</li> <li>Programming</li> <li>Emulation of other computing systems</li> <li>Working with files and directories</li> <li>Converting data from one format to another</li> <li>Compressing and/or archiving data and/or directory structures</li> <li>Imaging disks</li> <li>Encrypting, decrypting, creating checksum records for, checking against checksum records, packing with parity data, restoring from parity data…</li> <li>Running apps (this is basically just opening documents)</li> <ul> <li>Distributed computing</li> </ul> <li>Forensics</li> <li>Computer security</li> <ul> <li>Malware prevention, intrusion detection, …</li> </ul> <li>Data serialization</li> <li>…</li> </ul> <li>Exchange</li> <ul> <li>Buying and selling goods</li> <li>Trading stocks</li> <li>Purchasing and selling tickets</li> <li>Issuing and redeeming coupons</li> <li>Sending money (money-order style)</li> <li>…</li> </ul> <li>Searching</li> <ul> <li>Answers (e.g. facts, math questions)</li> <li>Finding media (e.g. news, movies, music, etc.)</li> <li>Locating documents</li> <li>…</li> </ul> <li>Guided time use and content consumption</li> <ul> <li>Notifications</li> <ul> <li>Emergencies</li> <li>Important news</li> <li>Emails</li> <li>Blog feeds</li> <li>Things I’m supposed to be doing</li> <li>Personal health warnings</li> <li>Computer status warnings (disk/memory failure, overheating, can’t connect to Ember server, running out of battery power, …)</li> <li>…</li> </ul> <li>Activity guidance</li> <ul> <li>What to do right now</li> <li>What I have on my schedule upcoming</li> <li>…</li> </ul> <li>News headlines</li> <li>Blog feeds</li> <li>Podcasts</li> <li>Top charts (popular items)</li> <li>Best charts (classics / enduring popularity items)</li> <li>Suggested recipes</li> <li>Fitness tips</li> <li>Weather information</li> <li>Stock market information</li> <li>Computer’s status (resource usage, etc.)</li> <li>Personal health</li> <li>Sports information</li> <li>Acquaintance suggestions (people I might find interesting to talk to / get to know)</li> <li>Dating suggestions / matchmaking</li> <li>…</li> </ul> <li>Communication</li> <ul> <li>Instant messaging</li> <li>Email</li> <li>Video chat and group video chat</li> <li>Audio and video messages</li> <li>Collaborative document editing (this is “Document creation” but is related to communication)</li> <li>Social networking</li> <li>Blogging and microblogging (this is “Document creation” but is also a form of communication)</li> <li>Newsgroups</li> <li>BBSes</li> <li>File sharing</li> <li>Industrial automation (machine embroidery, etc.) (not sure if this fits in communication, since it’s communication with machines)</li> <li>Sharing/microblogging/adding as status updates URLs, photographs, music, videos, …</li> <li>Social bookmarking</li> <li>…</li> </ul> </ul> </main> </body> </html>